Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.
1. Spoofing : Docker communication between the daemon and container is not protected using TLS, so attacker might use this loop hole to intercept the communication.

2. Tampering : Misconfiguration of dockerfile will give the attacker the ability control and changes on the Dockerfile. Image security also is a big threat and usually affecting the security of our own running Docker without we knowing it.

3. Repudiation : Once get control of the dockerfile, attacker now will be able to change any images or steps which being used in production.

4. Information Disclosure : Any sensitive data (username, password, secret-key, etc) might be exposed through the Dockerfile or any configuration file in the system. 

5. Denial of Service : A common attack with a vast amount of traffic to the docker application that cause the resources of the docker environment to be scarce and affecting other container to starve of resources which resulted with crashed app. Limiting memory when running a container is a best choice to prevent this issue.

6. Elevation of privilege : Attacker once get control of one of the aspect of docker that is runned with --privilege flag, attacker will be able to control any other resources. Prevent this attack by avoiding/eliminating the usage of --user-privilege flag.

Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

1. Spoofing : kube-api server and etcd is the main parts of kubernetes. Attacker might make a malicious call spoofing API server. Make sure that all call need to be over TLS and no basic and anonymous call allowed.

2. Tampering : Attacker might be able to access and gain control of the etcd. They might change the specification of the pods configuration. We may set the ownership of the etcd files to etcd:etcd using etcd group and user.

3. Repudiation : unauthorized call or changes to the kube-apiserver. Make sure to eliminate any anonymous and basic authentication and all traffic/communication must be over TLS.

4. Information Disclosure : etcd store the key value of our pods configuration. Attacker might be able to get control of the etcd files. This can be avoid or mitigated by saving all the configuration files as secret.

5. Denial of Service : Kubelet on working nodes can send execessive request that overwhelmed the resources. This can be mitigated by protecting the kernel by setting --protect kernel defaults to true or all incoming request must be inspected and make sure that it is only accepting request from registered nodes.


Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).

* 2.1 Ensure network traffic is restricted between containers on the default bridge (Scored)
-- Description:
By default, all network traffic is allowed between containers on the same host on the default network bridge. If not desired, restrict all inter-container communication. Link specific containers together that require communication. Alternatively, you can create custom network and only join containers that need to communicate to that custom network.

-- Rationale:
By default, unrestricted network traffic is enabled between all containers on the same host on the default network bridge. Thus, each container has the potential of reading all packets across the container network on the same host. This might lead to an unintended and unwanted disclosure of information to other containers. Hence, restrict inter-container communication on the default network bridge.

-- Audit:
Run the below command and verify that the default network bridge has been configured to restrict inter-container communication. docker network ls --quiet | xargs docker network inspect --format '{{ .Name }}: {{ .Options }}'
It should return com.docker.network.bridge.enable_icc:false for the default network bridge.

-- Remediation:
Edit the Docker daemon configuration file to ensure that icc is disabled. It should include the following setting -> "icc": false
Alernatively, run the docker daemon directly and pass --icc=false as an argument. For Example, dockerd --icc=false

* 2.2.b Ensure the logging level is set to 'info' (Scored)

-- Description
Set Docker daemon log level to info.

-- Rationale
Setting up an appropriate log level configures the Docker daemon to log events that you would want to review later. A base log level of info and above captures all logs except debug logs. Unless required, you should not run Docker daemon at debug log level.

-- Audit
To confirm that the log level setting is info, review both the dockerd startup options, and also the log level settings in /etc/docker/daemon.json. To review the dockerd startup options, run:

`ps -ef | grep dockerd`

Ensure that either the --log-level parameter is not present or if present, that it is set to info.

Similarly, review the /etc/docker/daemon.json for the log-level setting.

-- Remediation
Ensure that the Docker daemon configuration file has the following configuration included:

"log-level": "info" 

Alternatively, run the Docker daemon with the log-level specified:

dockerd --log-level="info"

* 4.5 Ensure Content trust for Docker is Enabled (Scored)

-- Description:
Content trust is disabled by default and should be enabled in line with organizational security policy.

-- Rationale:
Content trust provides the ability to use digital signatures for data sent to and received from remote Docker registries. These signatures allow client-side verification of the identity and the publisher of specific image tags and ensures the provenance of container images.

-- Audit:
You should execute the following command: echo $DOCKER_CONTENT_TRUST
This should return a value of 1.

-- Remediation:
To enable content trust in a bash shell, you should enter the following command: export DOCKER_CONTENT_TRUST=1
Alternatively, you could set this environment variable in your profile file so that content trust in enabled on every login.